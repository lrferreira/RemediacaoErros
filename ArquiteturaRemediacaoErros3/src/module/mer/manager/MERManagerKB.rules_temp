package module.mer.manager;

import javax.swing.JComponent;
import module.entity.Goal;
import module.entity.Action;
import module.entity.WrongAnswer;
import util.Constants;
import module.entity.MERFunction;
import module.entity.MultipleExternalRepresentation;
import module.entity.RuleToHuman;
import module.entity.TypeMER;
import module.entity.DBConnect;
import java.util.ArrayList;

ruleBase MERManagerKB {




	rule ruleMER_1_0 {

		declarations
			Action action;
			DBConnect dbCon;
			MERFunction merFunction;
			MultipleExternalRepresentation mer;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getId().equals(1L);

		actions
			action.getRegrasAcionadas().add("ruleMER_1_");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "mer.getId().equals(1L);\n");
			MultipleExternalRepresentation m = dbCon.getMER(1L);
			mer.setId(m.getId());
			mer.setDescription(m.getDescription());
			mer.setComplexity(m.getComplexity());
			mer.setImage(m.getImage());
			mer.setMerFunctions(m.getMerFunctions());
			mer.setTags(m.getTags());
			mer.setTypeMers(m.getTypeMers());
			action.getRegrasAcionadas().add("ruleMER_1_");
			modified(mer);
			modified(ruleToHuman);
			modified(action);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}
// -rule-end- 


	rule ruleMER_1_complexity_1_1 {

		declarations
			Action action;
			DBConnect dbCon;
			MERFunction merFunction;
			MultipleExternalRepresentation mer;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getComplexity() == 1;

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_complexity_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "mer.getComplexity() == 1;\n");
			MultipleExternalRepresentation m = dbCon.getMER(1L);
			mer.setId(m.getId());
			mer.setDescription(m.getDescription());
			mer.setComplexity(m.getComplexity());
			mer.setImage(m.getImage());
			mer.setMerFunctions(m.getMerFunctions());
			mer.setTags(m.getTags());
			mer.setTypeMers(m.getTypeMers());
			action.getRegrasAcionadas().add("ruleMER_1_complexity_1_");
			modified(mer);
			modified(ruleToHuman);
			modified(action);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}
// -rule-end- 


	rule ruleMER_1_merfunction_1_2 {

		declarations
			Action action;
			DBConnect dbCon;
			MultipleExternalRepresentation mer;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			action.getMerFunction().getId().equals(1L) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_merfunction_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "action.getMerFunction().getId().equals(1L) ; \n");
			MultipleExternalRepresentation m = dbCon.getMER(1L);
			mer.setId(m.getId());
			mer.setDescription(m.getDescription());
			mer.setComplexity(m.getComplexity());
			mer.setImage(m.getImage());
			mer.setMerFunctions(m.getMerFunctions());
			mer.setTags(m.getTags());
			mer.setTypeMers(m.getTypeMers());
			action.getRegrasAcionadas().add("ruleMER_1_merfunction_1_");
			modified(action);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}
// -rule-end- 


	rule ruleMER_1_typemer_1_1_3 {

		declarations
			Action action;
			DBConnect dbCon;
			MERFunction merFunction;
			MultipleExternalRepresentation mer;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getTypeMers().contains(new TypeMER(1L, null )) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_typemer_1_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "mer.getTypeMers().contains(new TypeMER(1L, null )) ; \n");
			MultipleExternalRepresentation m = dbCon.getMER(1L);
			mer.setId(m.getId());
			mer.setDescription(m.getDescription());
			mer.setComplexity(m.getComplexity());
			mer.setImage(m.getImage());
			mer.setMerFunctions(m.getMerFunctions());
			mer.setTags(m.getTags());
			mer.setTypeMers(m.getTypeMers());
			action.getRegrasAcionadas().add("ruleMER_1_typemer_1_1_");
			modified(action);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}
// -rule-end- 


	rule ruleMER_15_typemer_1_3_1_3_4 {

		declarations
			Action action;
			DBConnect dbCon;
			MERFunction merFunction;
			MultipleExternalRepresentation mer;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getTypeMers().contains(new TypeMER(1L, null )) || 
			mer.getTypeMers().contains(new TypeMER(3L, null )) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_15_typemer_1_3_1_3_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "mer.getTypeMers().contains(new TypeMER(1L, null )) || \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "mer.getTypeMers().contains(new TypeMER(3L, null )) ; \n");
			MultipleExternalRepresentation m = dbCon.getMER(15L);
			mer.setId(m.getId());
			mer.setDescription(m.getDescription());
			mer.setComplexity(m.getComplexity());
			mer.setImage(m.getImage());
			mer.setMerFunctions(m.getMerFunctions());
			mer.setTags(m.getTags());
			mer.setTypeMers(m.getTypeMers());
			action.getRegrasAcionadas().add("ruleMER_15_typemer_1_3_1_3_");
			modified(action);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 15 - mer 15");
			flush();

	}
// -rule-end- 

// end_rules
	
}

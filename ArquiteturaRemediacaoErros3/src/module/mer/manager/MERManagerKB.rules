package module.mer.manager;

import javax.swing.JComponent;
import module.entity.Goal;
import module.entity.Action;
import module.entity.WrongAnswer;
import util.Constants;
import module.entity.MERFunction;
import module.entity.MultipleExternalRepresentation;
import module.entity.RuleToHuman;
import module.entity.TypeMER;
import module.entity.DBConnect;
import java.util.ArrayList;

ruleBase MERManagerKB {




	rule ruleMER_1_0 {

		declarations
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getId().equals(1L);

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(1L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}


	rule ruleMER_1_complexity_1_1 {

		declarations
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getComplexity() == 1;

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_complexity_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(1L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}


	rule ruleMER_1_merfunction_1_2 {

		declarations
			MERFunction merFunction;
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			merFunction.getId().equals(1) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_merfunction_1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(1L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}


	rule ruleMER_1_typemer1_3 {

		declarations
			TypeMER typeMER;
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			typeMER.getId().equals(1) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_1_typemer1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(1L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 1 - mer 1");
			flush();

	}


	rule ruleMER_2_4 {

		declarations
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getId().equals(2L);

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(2L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 2 - mer 2");
			flush();

	}


	rule ruleMER_2_complexity_2_5 {

		declarations
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			mer.getComplexity() == 2;

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_2_complexity_2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(2L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 2 - mer 2");
			flush();

	}


	rule ruleMER_2_merfunction_1_2_6 {

		declarations
			MERFunction merFunction;
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			merFunction.getId().equals(1) || 
			merFunction.getId().equals(2) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_2_merfunction_1_2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(2L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 2 - mer 2");
			flush();

	}


	rule ruleMER_2_typemer1_2_7 {

		declarations
			TypeMER typeMER;
			MultipleExternalRepresentation mer;
			DBConnect dbCon;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			typeMER.getId().equals(1) || 
			typeMER.getId().equals(2) ; 

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para selecionar a MRE: ruleMER_2_typemer1_2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condi��es:  \n");
			mer = dbCon.getMER(2L);
			modified(mer);
			modified(ruleToHuman);
			System.out.println("Exibi��o de MRE 2 - mer 2");
			flush();

	}

// end_rules
	
}

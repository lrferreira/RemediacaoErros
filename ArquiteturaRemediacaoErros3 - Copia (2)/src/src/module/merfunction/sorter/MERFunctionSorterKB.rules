package src.module.merfunction.sorter;

import javax.swing.JComponent;
import module.entity.Goal;
import module.entity.Action;
import module.entity.WrongAnswer;
import module.entity.RuleToHuman;
import util.Constants;
import module.entity.MERFunction;
import module.mer.manager.MERManagerController;


ruleBase MERFunctionSorterKB {



	rule constrainInterpretation01_PATH_1_GOAL_1_COMPONENT_txtParcela1_0 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_DOMINIO;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(1);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela1");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation01_PATH_1_GOAL_1_COMPONENT_txtParcela1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência no Domínio \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule complementaryRoles_PATH_1_GOAL_1_COMPONENT_txtParcela1_1 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INTERPRETACAO_EQUIVOCADA;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(1);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela1");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: complementaryRoles_PATH_1_GOAL_1_COMPONENT_txtParcela1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Interpretação Equivocada \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_PAPEIS_COMPLEMENTARES);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Papéis Complementares");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_1_GOAL_1_COMPONENT_txtParcela1_2 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(1);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela1");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_1_GOAL_1_COMPONENT_txtParcela1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constructDeeperUnderstanding02_PATH_1_GOAL_2_COMPONENT_txtOp_3 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_ESCOLHA_OPERADOR;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(2);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtOp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding02_PATH_1_GOAL_2_COMPONENT_txtOp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência na Escolha do Operador \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constrainInterpretation01_PATH_1_GOAL_2_COMPONENT_txtOp_4 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_DOMINIO;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(2);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtOp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation01_PATH_1_GOAL_2_COMPONENT_txtOp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência no Domínio \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_1_GOAL_2_COMPONENT_txtOp_5 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(2);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtOp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_1_GOAL_2_COMPONENT_txtOp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constrainInterpretation01_PATH_1_GOAL_3_COMPONENT_txtParcela2_6 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_DOMINIO;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(3);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela2");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation01_PATH_1_GOAL_3_COMPONENT_txtParcela2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência no Domínio \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constrainInterpretation02_PATH_1_GOAL_3_COMPONENT_txtParcela2_7 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INDIRETAMENTE_IDENTIFICAVEL;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(3);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela2");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation02_PATH_1_GOAL_3_COMPONENT_txtParcela2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Indiretamente Identificável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_1_GOAL_3_COMPONENT_txtParcela2_8 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(3);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela2");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_1_GOAL_3_COMPONENT_txtParcela2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constructDeeperUnderstanding02_PATH_1_GOAL_4_COMPONENT_txtResp_9 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_ESCOLHA_OPERADOR;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(4);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding02_PATH_1_GOAL_4_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência na Escolha do Operador \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule complementaryRoles_PATH_1_GOAL_4_COMPONENT_txtResp_10 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INTERPRETACAO_EQUIVOCADA;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(4);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: complementaryRoles_PATH_1_GOAL_4_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Interpretação Equivocada \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_PAPEIS_COMPLEMENTARES);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Papéis Complementares");
			flush();

	}


	rule constrainInterpretation02_PATH_1_GOAL_4_COMPONENT_txtResp_11 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INDIRETAMENTE_IDENTIFICAVEL;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(4);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation02_PATH_1_GOAL_4_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Indiretamente Identificável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_1_GOAL_4_COMPONENT_txtResp_12 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(1);
			action.getGoal().getId().equals(4);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_1_GOAL_4_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constrainInterpretation01_PATH_2_GOAL_5_COMPONENT_txtParcela1_13 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_DOMINIO;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(5);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela1");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation01_PATH_2_GOAL_5_COMPONENT_txtParcela1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência no Domínio \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule complementaryRoles_PATH_2_GOAL_5_COMPONENT_txtParcela1_14 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INTERPRETACAO_EQUIVOCADA;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(5);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela1");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: complementaryRoles_PATH_2_GOAL_5_COMPONENT_txtParcela1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Interpretação Equivocada \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_PAPEIS_COMPLEMENTARES);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Papéis Complementares");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_2_GOAL_5_COMPONENT_txtParcela1_15 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(5);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela1");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_2_GOAL_5_COMPONENT_txtParcela1_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constructDeeperUnderstanding02_PATH_2_GOAL_6_COMPONENT_txtOp_16 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_ESCOLHA_OPERADOR;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(6);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtOp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding02_PATH_2_GOAL_6_COMPONENT_txtOp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência na Escolha do Operador \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constrainInterpretation01_PATH_2_GOAL_6_COMPONENT_txtOp_17 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_DOMINIO;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(6);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtOp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation01_PATH_2_GOAL_6_COMPONENT_txtOp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência no Domínio \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_2_GOAL_6_COMPONENT_txtOp_18 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(6);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtOp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_2_GOAL_6_COMPONENT_txtOp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constrainInterpretation01_PATH_2_GOAL_7_COMPONENT_txtParcela2_19 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_DOMINIO;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(7);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela2");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation01_PATH_2_GOAL_7_COMPONENT_txtParcela2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência no Domínio \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constrainInterpretation02_PATH_2_GOAL_7_COMPONENT_txtParcela2_20 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INDIRETAMENTE_IDENTIFICAVEL;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(7);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela2");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation02_PATH_2_GOAL_7_COMPONENT_txtParcela2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Indiretamente Identificável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_2_GOAL_7_COMPONENT_txtParcela2_21 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(7);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtParcela2");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_2_GOAL_7_COMPONENT_txtParcela2_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule constructDeeperUnderstanding02_PATH_2_GOAL_8_COMPONENT_txtResp_22 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_DIRETAMENTE_IDENTIFICAVEL_DEFICIENCIA_ESCOLHA_OPERADOR;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(8);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding02_PATH_2_GOAL_8_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Diretamente Identificável - Deficiência na Escolha do Operador \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}


	rule complementaryRoles_PATH_2_GOAL_8_COMPONENT_txtResp_23 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INTERPRETACAO_EQUIVOCADA;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(8);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: complementaryRoles_PATH_2_GOAL_8_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Interpretação Equivocada \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_PAPEIS_COMPLEMENTARES);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Papéis Complementares");
			flush();

	}


	rule constrainInterpretation02_PATH_2_GOAL_8_COMPONENT_txtResp_24 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_INDIRETAMENTE_IDENTIFICAVEL;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(8);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constrainInterpretation02_PATH_2_GOAL_8_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Indiretamente Identificável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_RESTRICAO_INTERPRETACAO);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Restrição Interpretação");
			flush();

	}


	rule constructDeeperUnderstanding03_PATH_2_GOAL_8_COMPONENT_txtResp_25 {

		declarations
			Action action;
			MERFunction merFunction;
			RuleToHuman ruleToHuman;

		localdecl

		conditions
			((WrongAnswer)action.getAnswer()).getType() == Constants.TIPO_ERRO_SOLUCAO_NAO_CATEGORIZAVEL;
			action.getGoal().getPath().getId().equals(2);
			action.getGoal().getId().equals(8);
			action.getGoal().getComponent().getName().equalsIgnoreCase("txtResp");

		actions
			ruleToHuman.setDescription(ruleToHuman.getDescription() + "Regra acionada para classificar a Função da MRE: constructDeeperUnderstanding03_PATH_2_GOAL_8_COMPONENT_txtResp_ \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " Condições:  \n");
			ruleToHuman.setDescription(ruleToHuman.getDescription() + " \t Tipo de Erro = Solução Não Categorizável \n");
			merFunction.setType(Constants.TIPO_FUNCAOMRE_COMPREENSAO_MAIS_APROFUNDADA);
			modified(merFunction);
			modified(ruleToHuman);
			System.out.println("Função MRE: Compreensão Mais Aprofundada");
			flush();

	}

// end_rules
	
}
